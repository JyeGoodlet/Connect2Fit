@using Microsoft.AspNet.Identity
@using Connect2Fit.Models;
@model  ScheduleItem
@{
    ViewBag.Title = "InstructorRoom";
}


<div ng-app="Room" ng-cloak   >
<div ng-controller="WebRTCVideo"  class="row" id="ClientAvatars">
    <div class="col-md-3" ng-repeat="client in clients">
        <!-- Wave stuff<canvas style="height:250px;" ng-init="addAvatarToUser(client)"  id="{{client.id}}" width="500" height="500"></canvas>
        <div><button type="button" class="btn btn-primary" ng-click="client.avatar.animation()">Wave</button></div> -->
        <canvas style="background-color:blue;height:250px;" id="{{client.id}}" width="640" height="480"></canvas>
        <div>
            <span>{{client.name}}</span>
            <span ng-if="(client.name | userOnline:getConnectedClients()) == true" class="label label-success">Online</span>
            <span ng-if="(client.name | userOnline:getConnectedClients()) == false" class="label label-danger">Offline</span>
        </div>
    </div>

</div>

<div class="row">
    <h3>Instructor Feed</h3>
    <div class="col-md-3" id="videos">
        <video autoplay="autoplay" id="selfVideo" ></video>
        <div>Room Status: <span id="status">Connecting.</span></div>

        <video id="box0" style="display:none"></video>
        <video id="box1" style="display:none"></video>
        <video id="box2" style="display:none"></video>
        <video id="box3" style="display:none"></video>
        <video id="box4" style="display:none"></video>



    </div>

</div>
<div ng-controller="Chat" >
    <h2>Client Classes</h2>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Person</th>
                <th>Message</th>

            </tr>
        </thead>
        <tbody>
            <tr class="animation" ng-repeat="message in messages">
                <td>{{message.person}}</td>
                <td>{{message.text}}</td>

            </tr>
        </tbody>

    </table>
    <form>
        <input type="text" ng-model="newMessage" />
        <input type="submit" ng-click="addMessage()" value="Save" />
    </form>


</div>
</div>



@section scripts {
<script src='~/Scripts/angular.js'></script>
<script src="~/Scripts/jquery.signalR-2.2.0.js"></script>
<script src="~/signalr/hubs"></script>
<script src="~/Content/Research/assets/armWavingOO.js"></script>

<link rel="stylesheet" type="text/css" href="http://ec2-52-64-224-50.ap-southeast-2.compute.amazonaws.com:8080/easyrtc/easyrtc.css" />

<!-- Assumes global locations for socket.io.js and easyrtc.js -->
<script src="http://ec2-52-64-224-50.ap-southeast-2.compute.amazonaws.com:8080/socket.io/socket.io.js"></script>
<script type="text/javascript" src="http://ec2-52-64-224-50.ap-southeast-2.compute.amazonaws.com:8080/easyrtc/easyrtc.js"></script>
<script type="text/javascript">

    //signalr connection - used to send messages between clients via server
    chat = $.connection.roomHub;
    $.connection.hub.start(
        function () {
            chat.server.joinRoom(@Model.id);
        }).done(function () {
            //closing stuff here
            //chat.server.leaveRoom(@Model.id);
        });


    //this is the module that all the angular controllers on this page use
    var app = angular.module('Room', []);
    
    
    //The Chat Controller allows the client to send and recieve text messages. Uses signalr
    app.controller('Chat', function ($scope, $http) {
        var groupId = @Model.id;
        $scope.userId = "@User.Identity.Name";


         
        //hold a list of all the classes
        $scope.messages = [];

        $scope.addMessage = function () {
            //add message
            var newMessage = { person: $scope.userId, text: $scope.newMessage }
            $scope.messages.push(newMessage);
            chat.server.message(groupId, newMessage);
            $scope.newMessage = "";
        }

        //onload
        var init = function() {
            //DO STUFF HERE

        }();

        //signalr functions
        chat.client.message = function (message) {

            //console.log(message);
            $scope.messages.push(message);
            $scope.$apply();

        }

        //paint points on to canvas
        var paintPoints = function (context, points) {
      
            context.font = '24px Helvetica';
            context.fillStyle = "#fff";
            for (x in points) {
                var point = points[x];
                context.fillText('+', point.x - 6, point.y + 6);
            };


            return false;
        };

        chat.client.recievePoint = function(point, clientId) {
            //console.log(clientId);
            var canvas = $("#" + clientId)[0];
            var context = canvas.getContext('2d');
            context.clearRect(0, 0, canvas.width, canvas.height);
            paintPoints(context, point);


        }


    });





    //the webrtc controller handles the recieving of video from the instructor and also sends the clients audio to the instructor
    //webrtc is peer to peer so video does not pass through server.
    app.controller('WebRTCVideo', function ($scope, $http, $timeout) {
        var maxCALLERS = 5;
        $scope.clients;
        $scope.connectedClients = [];
        
        $scope.getConnectedClients = function() {
            return $scope.connectedClients;
        }

        $scope.getUsers = function() {
            $http.get('/Room/GetAttendies/' + @Model.id).then(function(response) {
                //console.log(response.data)
                $scope.clients = response.data;
                
            });
        }

        $scope.addAvatarToUser = function(user) {
            console.log(user.id);
            var id = user.id;
            $timeout(function(){
                user.avatar = new armWaving(String(id));
            });
        }


  

        $scope.online = function(id) {
            id = id;
            items = $scope.connectedClients;

            for (var x = 0; x < items.length;x++) {

                //console.log(item);
                if (items[x] == id) {
                    return "Connected";
                } 
            }
            return "Not Connected"
        }

        var init = function() {
           
            $scope.getUsers();
            
        }();


        $(document).ready(function() {
            connect();

        })

        var selfEasyrtcid = "";

        function connect() {
            easyrtc.setSocketUrl("http://ec2-52-64-224-50.ap-southeast-2.compute.amazonaws.com:8080");
            easyrtc.setVideoDims(320, 240);
            easyrtc.dontAddCloseButtons();
            easyrtc.setUsername("@User.Identity.Name");
            easyrtc.joinRoom("@Model.id", null, null, null)
            easyrtc.setRoomOccupantListener(callEverybodyElse);

            easyrtc.easyApp("easyrtc.audioVideoSimple", "selfVideo", ["box0", "box1", "box2", "box3", "box4"], loginSuccess, loginFailure);
        }



        function clearConnectList() {
            $scope.connectedClients = [];
        }





        function callEverybodyElse(roomName, otherPeople) {
            clearConnectList();
            for (var easyrtcid in otherPeople) {

                $scope.connectedClients.push(easyrtc.idToName(easyrtcid));
                //performCall(easyrtcid);
            }
            $scope.$apply();        


            easyrtc.setRoomOccupantListener(null); // so we're only called once.

            var list = [];
            var connectCount = 0;
            for(var easyrtcid in otherPeople ) {
                list.push(easyrtcid);
            }
            //
            // Connect in reverse order. Latter arriving people are more likely to have
            // empty slots.
            //
            function establishConnection(position) {
                function callSuccess() {
                    connectCount++;
                    if( connectCount < maxCALLERS && position > 0) {
                        establishConnection(position-1);
                    }
                }
                function callFailure(errorCode, errorText) {
                    easyrtc.showError(errorCode, errorText);
                    if( connectCount < maxCALLERS && position > 0) {
                        establishConnection(position-1);
                    }
                }
                easyrtc.call(list[position], callSuccess, callFailure);

            }
            if( list.length > 0) {
                establishConnection(list.length-1);
            }
        }





        function loginSuccess(easyrtcid) {
            selfEasyrtcid = easyrtcid;
            document.getElementById("status").innerHTML = "Connected";
        }


        function loginFailure(errorCode, message) {
            easyrtc.showError(errorCode, message);
        }


    });


    //this filter is used to show which clients are offline or online
    angular.module('Room').filter('userOnline', function() {
        return function(user, onlineUsers) {

            for (var i in onlineUsers) {

                if (onlineUsers[i] == user) {
                        
                        return true;
                    }
                }
                return false;

           
        };
    });

       
    

</script>

    }