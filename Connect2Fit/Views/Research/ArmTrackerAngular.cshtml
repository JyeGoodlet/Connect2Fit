<!-- -->
<link rel="stylesheet" href="~/Content/Research/assets/demo.css">
@{
    ViewBag.Title = "Arm Tracker";
}
<style>
#canvas {
        background-color: blue;
    }
</style>
<div ng-app="Tracking" ng-controller="TrackingPoints" id="TrackingPoints"  class="row">
    <div class="col-sm-8">
        <h3>Image frame</h3>
        <video id="sourceVideo" width="640" height="480" preload autoplay loop muted controls>
        </video>
        <canvas id="canvas" width="640" height="480"></canvas>
    </div>
    <div class="col-sm-4">
        <h3>Points detecting</h3>
        <p>This tracker will lock on to the tracked colour target which in this case is yellow and update the cross and the data below.</p>
        <ul class="list-unstyled list-group" > 
            <li class="list-group-item" ng-repeat="(key, value) in character">
                Name: <span class="text-info"> {{value.name}}</span>
                x: <span class="text-info">{{value.x}}</span>
                y: <span class="text-info">{{value.y}}</span>
            </li>
        </ul>
    </div>
</div>



@section Scripts {
    @{
        // databinding references
    }

    <script src='~/Scripts/angular.js'></script>
    @{
        // colour tracker references
     }
    <script src="~/Content/Research/assets/tracking.js"></script>
    <script>

        var app = angular.module('Tracking', []);


        // prep work before page loads
        // setting up the data binding
        var trackingPoint = function (name, startX, startY) {
            this.name = name;
            this.x = startX;
            this.y = startY;
        };

        app.controller('TrackingPoints', function ($scope, $http) {
            
            $scope.character = {};
            $scope.updatePoint = function (oldPoint, newPoint) {
                $scope.character[newPoint.name] = newPoint;
                //console.log($scope.character['R Shoulder']);
                $scope.$apply();
                return false;
            };
            $scope.paintPoints = function (context) {
                context.font = '24px Helvetica';
                context.fillStyle = "#fff";
                var points = $scope.character;
                for (x in points) {
                    var point = points[x];
                    context.fillText('+', point.x - 6, point.y + 6);
                };
                return false;
            };

            //on start
            var init = function () {
                $scope.character['L Hand'] = new trackingPoint('L Hand', 180, 240);
                $scope.character['L Elbow'] = new trackingPoint('L Elbow', 220, 180);
                $scope.character['L Shoulder'] = new trackingPoint('L Shoulder', 265, 115);
                $scope.character['R Shoulder'] = new trackingPoint('R Shoulder', 380, 115);
                $scope.character['R Elbow'] = new trackingPoint('R Elbow', 420, 180);
                $scope.character['R Hand'] = new trackingPoint('R Hand', 440, 240);

            }()


         });

        // after page loads
        $(function () {

            vm = angular.element(document.getElementById("TrackingPoints")).scope();
            // load dummy data into data bind



            // tracker setup
            var trackYellow = new tracking.ColorTracker(['yellow']);
            // config tracker
            trackYellow.setMinDimension(2);
            trackYellow.setMinGroupSize(1);
            trackYellow.on('track', function (event) {
                context.clearRect(0, 0, canvas.width, canvas.height);
                if (event.data.length === 0) {
                    // No colors were detected in this frame.
                } else {
                    event.data.forEach(function (rect) {
                        // only for testing purposes
                        context.strokeStyle = rect.color;
                        context.strokeRect(rect.x, rect.y, rect.width, rect.height);
                        // different colours for each joint will be added to remove crossover
                        var newX, newY;
                        var trackingRange = 15;
                        for (trackedPoint in vm.character) {
                            //console.log(vm.character[trackedPoint]);
                            trackedPoint = vm.character[trackedPoint];
                            if ((trackedPoint.x > (rect.x - trackingRange) &&
                                trackedPoint.x < (rect.x + rect.width + trackingRange)) &&
                                (trackedPoint.y > (rect.y - trackingRange) &&
                                trackedPoint.y < (rect.y + rect.height + trackingRange))) {
                                newX = rect.x + (rect.width / 2);
                                newY = rect.y + (rect.height / 2);
                                vm.updatePoint(trackedPoint, new trackingPoint(trackedPoint.name, newX, newY));
            
                            }
                        };
                    });
                }
                vm.paintPoints(context);
            });
            // start the colour tracker
            var canvas = $("#canvas")[0];
            var context = canvas.getContext('2d');
            vm.paintPoints(context);
            // error handler
            function windowError(message) {
                alert(message + " using fallback video");
                var source = document.createElement('source');
                source.src = "@Url.Content("~/Content/img/Fallback.m4v")";
                source.type = "video/mp4";
                $('#sourceVideo').append(source);
                source = document.createElement('source');
                source.src = "@Url.Content("~/Content/img/Fallback.ogv")";
                source.type = "video/ogg";
                $('#sourceVideo').append(source);
            }
            window.onerror = windowError;
            var trackingTask = tracking.track('#sourceVideo', trackYellow, { camera: true });
        });
    </script>
}