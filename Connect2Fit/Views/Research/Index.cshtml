<link href="~/Content/Research/main.css" rel="stylesheet" />
@{
    ViewBag.Title = "Index";
}
<video id="webcam" autoplay width="640" height="480"></video>
<canvas id="canvas-source" width="640" height="480"></canvas>
<canvas id="canvas-blended" width="640" height="480"></canvas>


@section Scripts {
    <script>
        $(function () {
            function hasGetUserMedia() {
                // Note: Opera builds are unprefixed.
                return !!(navigator.mediaDevices || navigator.getUserMedia || navigator.webkitGetUserMedia ||
                    navigator.mozGetUserMedia || navigator.msGetUserMedia);
            }
            if (hasGetUserMedia()) {
                $("#info").hide();
                $("#message").show();
            } else {
                $("#info").show();
                $("#message").hide();
                return;
            }
            var webcamError = function (e) {
                alert('Webcam error!', e);
            };

            var video = $('#webcam')[0];
            // firefox
            if (navigator.mediaDevices) {
                var constraints = { audio: false, video: { width: 1280, height: 720 } };
                navigator.mediaDevices.getUserMedia(constraints)
                  .then(function (stream) {
                      var video = document.querySelector('video');
                      video.src = window.URL.createObjectURL(stream);
                      video.onloadedmetadata = function (e) {
                          video.play();
                      };
                  })
                  .catch(function (err) {
                      console.log(err.name + ": " + err.message);
                  });
            // chrome and opera, not working because of the video object?
            } else if (navigator.webkitGetUserMedia) {
                navigator.webkitGetUserMedia({ audio: false, video: true }, function (stream) {
                    video.src = window.webkitURL.createObjectURL(stream);

                }, webcamError);
            } else {
                //video.src = 'somevideo.webm'; // fallback.
            }

            var timeOut, lastImageData;
            var canvasSource = $("#canvas-source")[0];
            var canvasBlended = $("#canvas-blended")[0];

            var contextSource = canvasSource.getContext('2d');
            var contextBlended = canvasBlended.getContext('2d');

            // mirror video
            contextSource.translate(canvasSource.width, 0);
            contextSource.scale(-1, 1);

            function start() {
                $(canvasSource).show();
                $(canvasBlended).show();
                //$("#xylo").show();
                $("#message").hide();
                $("#description").show();
                update();
            }
            function update() {
                drawVideo();
                blend();
                //checkAreas();
                timeOut = setTimeout(update, 1000 / 60);
            }

            function drawVideo() {
                contextSource.drawImage(video, 0, 0, video.width, video.height);
            }
            function blend() {
                var width = canvasSource.width;
                var height = canvasSource.height;
                // get webcam image data
                var sourceData = contextSource.getImageData(0, 0, width, height);
                // create an image if the previous image doesn’t exist
                if (!lastImageData) lastImageData = contextSource.getImageData(0, 0, width, height);
                // create a ImageData instance to receive the blended result
                var blendedData = contextSource.createImageData(width, height);
                // blend the 2 images
                differenceAccuracy(blendedData.data, sourceData.data, lastImageData.data);
                // draw the result in a canvas
                contextBlended.putImageData(blendedData, 0, 0);
                // store the current webcam image
                lastImageData = sourceData;
            }

            function fastAbs(value) {
                // funky bitwise, equal Math.abs
                return (value ^ (value >> 31)) - (value >> 31);
            }

            function threshold(value) {
                return (value > 0x15) ? 0xFF : 0;
            }

            function difference(target, data1, data2) {
                // blend mode difference
                if (data1.length != data2.length) return null;
                var i = 0;
                while (i < (data1.length * 0.25)) {
                    target[4 * i] = data1[4 * i] == 0 ? 0 : fastAbs(data1[4 * i] - data2[4 * i]);
                    target[4 * i + 1] = data1[4 * i + 1] == 0 ? 0 : fastAbs(data1[4 * i + 1] - data2[4 * i + 1]);
                    target[4 * i + 2] = data1[4 * i + 2] == 0 ? 0 : fastAbs(data1[4 * i + 2] - data2[4 * i + 2]);
                    target[4 * i + 3] = 0xFF;
                    ++i;
                }
            }

            function differenceAccuracy(target, data1, data2) {
                if (data1.length != data2.length) return null;
                var i = 0;
                while (i < (data1.length * 0.25)) {
                    var average1 = (data1[4 * i] + data1[4 * i + 1] + data1[4 * i + 2]) / 3;
                    var average2 = (data2[4 * i] + data2[4 * i + 1] + data2[4 * i + 2]) / 3;
                    var diff = threshold(fastAbs(average1 - average2));
                    target[4 * i] = diff;
                    target[4 * i + 1] = diff;
                    target[4 * i + 2] = diff;
                    target[4 * i + 3] = 0xFF;
                    ++i;
                }
            }
            start();

        });
    </script>
}