<!-- -->
<link rel="stylesheet" href="~/Content/Research/assets/demo.css">
@{
    ViewBag.Title = "Arm Tracker";
}
<style>
#canvas {
        background-color: blue;
    }
</style>
<div class="row">
    <div class="col-sm-8">
        <h3>Image frame</h3>
        <video id="sourceVideo" width="640" height="480" preload  loop muted controls>
            <source src="~/Content/Research/images/Fallback.mp4" type="video/mp4" />
        </video>
        <canvas id="canvas" width="640" height="480"></canvas>
    </div>
    <div class="col-sm-4">
        <h3>Points detecting</h3>
        <p>This tracker will lock on to the tracked colour target which in this case is yellow and update the cross and the data below.</p>
        <ul class="list-unstyled list-group" data-bind="foreach: character">
            <li class="list-group-item">
                Name: <span class="text-info" data-bind="text: name"></span>
                x: <span class="text-info" data-bind="text: x"></span>
                y: <span class="text-info" data-bind="text: y"></span>
            </li>
        </ul>
    </div>
</div>



@section Scripts {
    @{
        // databinding references
    }
    <script src="~/Scripts/knockout-3.3.0.js"></script>
    @{
        // colour tracker references
     }
    <script src="~/Content/Research/assets/tracking.js"></script>
    <script>
        // prep work before page loads
        // setting up the data binding
        var trackingPoint = function (name, startX, startY) {
            this.name = name;
            this.x = startX;
            this.y = startY;
        };
        
        var vm = {
            character: ko.observableArray(),
            updatePoint: function (oldPoint, newPoint) {
                vm.character.remove(oldPoint);
                vm.character.push(newPoint);
                return false;
            },
            paintPoints: function (context) {
                context.font = '24px Helvetica';
                context.fillStyle = "#fff";
                var points = this.character();
                for (x in points) {
                    var point = points[x];
                    context.fillText('+', point.x - 6, point.y + 6);
                };
                return false;
            }
        };
        ko.applyBindings(vm);
        
        // after page loads
        $(function () {
            // load dummy data into data bind       
            vm.character.push(new trackingPoint('L Hand', 180, 240));         
            vm.character.push(new trackingPoint('L Elbow', 220, 180));          
            vm.character.push(new trackingPoint('L Shoulder', 265, 115));
            vm.character.push(new trackingPoint('R Shoulder', 380, 115));
            vm.character.push(new trackingPoint('R Elbow', 420, 180));
            vm.character.push(new trackingPoint('R Hand', 440, 240));
            
            
            // tracker setup
            var trackYellow = new tracking.ColorTracker(['yellow']);
            // config tracker
            trackYellow.setMinDimension(2);
            trackYellow.setMinGroupSize(1);
            trackYellow.on('track', function (event) {
                context.clearRect(0, 0, canvas.width, canvas.height);
                if (event.data.length === 0) {
                    // No colors were detected in this frame.
                } else {
                    event.data.forEach(function (rect) {
                        // only for testing purposes
                        context.strokeStyle = rect.color;
                        context.strokeRect(rect.x, rect.y, rect.width, rect.height);
                        // different colours for each joint will be added to remove crossover
                        var newX, newY;
                        var trackingRange = 15;
                        vm.character().forEach(function (trackedPoint) {
                            if ((trackedPoint.x > (rect.x - trackingRange) &&
                                trackedPoint.x < (rect.x + rect.width + trackingRange)) &&
                                (trackedPoint.y > (rect.y - trackingRange) &&
                                trackedPoint.y < (rect.y + rect.height + trackingRange))) {
                                newX = rect.x + (rect.width / 2);
                                newY = rect.y + (rect.height / 2);
                                vm.updatePoint(trackedPoint, new trackingPoint(trackedPoint.name, newX, newY));
                            }      
                        });
                    });
                }
                vm.paintPoints(context);
            });
            // start the colour tracker
            var canvas = $("#canvas")[0];
            var context = canvas.getContext('2d');
            vm.paintPoints(context);
            tracking.track('#sourceVideo', trackYellow, { camera: true });
        });
    </script>
}